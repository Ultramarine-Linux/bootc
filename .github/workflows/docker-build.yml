# Workflow dispatch template

name: Docker Buildx
on:
    workflow_call:
        inputs:
            variant:
                description: 'Variant to build'
                required: true
                default: 'base'
                type: string
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}

jobs:
    build:
        strategy:
            fail-fast: false
        runs-on: ubuntu-latest
        permissions:
            contents: read
            packages: write
            id-token: write
        
        steps:
          - name: Checkout repository
            uses: actions/checkout@v4
        
          - name: Install cosign
            if: github.event_name != 'pull_request'
            uses: sigstore/cosign-installer@v3
    
          - name: Set up QEMU
            uses: docker/setup-qemu-action@v3
            # with:
            #   platforms: arm64
          - name: Setup Docker buildx
            uses: docker/setup-buildx-action@v3
            # with:
            #   platforms: linux/amd64,linux/arm64

              # Login against a Docker registry except on PR
          - name: Log into registry ${{ env.REGISTRY }}
            if: github.event_name != 'pull_request'
            uses: docker/login-action@v3
            with:
              registry: ${{ env.REGISTRY }}
              username: ${{ github.actor }}
              password: ${{ secrets.GITHUB_TOKEN }}

          - name: Extract Docker metadata
            id: meta
            uses: docker/metadata-action@v5
            with:
              github-token: ${{ secrets.GITHUB_TOKEN }}
              images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            # Build and push Docker image with Buildx (don't push on PR)
            # https://github.com/docker/build-push-action
          - name: Build and push Docker image
            id: build-and-push
            uses: docker/build-push-action@v5
            with:
              context: ./${{ inputs.variant }}
              file: ./${{ inputs.variant }}/Containerfile
              push: ${{ github.event_name != 'pull_request' }}
              # tags: ${{ steps.meta.outputs.tags }}
              tags: ghcr.io/ultramarine-linux/${{ inputs.variant }}-bootc
              labels: ${{ steps.meta.outputs.labels }}
              cache-from: type=gha
              cache-to: type=gha,mode=max
              # platforms: linux/amd64,linux/arm64

            # Sign the resulting Docker image digest except on PRs.
            # This will only write to the public Rekor transparency log when the Docker
            # repository is public to avoid leaking data.  If you would like to publish
            # transparency data even for private images, pass --force to cosign below.
            # https://github.com/sigstore/cosign
          - name: Sign the published Docker image
            if: github.event_name != 'pull_request'
            env:
              # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
              TAGS: ${{ steps.meta.outputs.tags }}
              DIGEST: ${{ steps.build-and-push.outputs.digest }}
            # This step uses the identity token to provision an ephemeral certificate
            # against the sigstore community Fulcio instance.
            run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

    build-image:
        needs: build
        strategy:
            fail-fast: false
        runs-on: ubuntu-latest
        container:
            image: ghcr.io/terrapkg/builder:f41
            options: --privileged --device=/dev/fuse
        permissions:
            contents: read
            packages: write
            id-token: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v4
            
            - name: Install dependencies
              run: |
                  dnf5 install -y buildah podman skopeo fuse rpm-ostree
            - name: Build container image
              run: |
                scripts/image-builder.sh "ghcr.io/ultramarine-linux/${{ inputs.variant }}-bootc" --rootfs btrfs
                
            - name: Upload artifacts
              uses: actions/upload-artifact@v4
              with:
                name: ${{inputs.variant}}-bootc-qcow2
                path: output/